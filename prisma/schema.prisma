generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
}

model Tutor {
  id              String   @id @default(cuid())
  fullName        String
  email           String   @unique
  profileImageUrl String?
  bio             String?
  courses         Course[]
}

model Student {
  id                    String                 @id @default(cuid())
  fullName              String
  email                 String                 @unique
  imageUrl              String?
  assessmentCompletions AssessmentCompletion[]
  Grade                 Grade[]
  lessonCompletions     LessonCompletion[]
  Notification          Notification[]
  submissionEntries     SubmissionEntry[]
  TestSubmission        TestSubmission[]
  courses               Course[]               @relation("CourseEnrollments")
}

model Course {
  id           String         @id @default(cuid())
  name         String
  description  String?
  imageUrl     String
  tutorId      String
  tutor        Tutor          @relation(fields: [tutorId], references: [id])
  courseEvents CourseEvent[]
  Grade        Grade[]
  lessons      Lesson[]
  Notification Notification[]
  quizzes      Quiz[]
  submissions  Submission[]
  tests        Test[]
  students     Student[]      @relation("CourseEnrollments")
}

model Lesson {
  id             String             @id @default(cuid())
  title          String
  description    String?
  order          Int
  courseId       String
  videoUrl       String[]           @default([])
  attachmentUrls Attachment[]
  course         Course             @relation(fields: [courseId], references: [id])
  completions    LessonCompletion[]
}

model Attachment {
  id       String @id @default(cuid())
  title    String
  url      String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model LessonCompletion {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  completedAt DateTime
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
}

model CourseEvent {
  id       String   @id @default(cuid())
  title    String
  date     DateTime
  link     String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
}

model Quiz {
  id          String                 @id @default(cuid())
  title       String
  courseId    String
  dueDate     DateTime
  createdAt   DateTime               @default(now())
  completions AssessmentCompletion[]
  course      Course                 @relation(fields: [courseId], references: [id])
}

model Test {
  id                   String                 @id @default(cuid())
  title                String
  courseId             String
  dueDate              DateTime
  createdAt            DateTime               @default(now())
  description          String
  isActive             Boolean                @default(true)
  preTestInstructions  String?
  timeLimit            Int?
  totalPoints          Int
  AssessmentCompletion AssessmentCompletion[]
  course               Course                 @relation(fields: [courseId], references: [id])
  questions            TestQuestion[]
  submissions          TestSubmission[]
}

model TestQuestion {
  id           String         @id @default(uuid())
  testId       String
  question     String
  type         QuestionType
  points       Int
  options      String[]
  answer       Json?
  language     String?
  matchPairs   Json?
  reorderItems String[]
  blankCount   Int?
  createdAt    DateTime       @default(now())
  test         Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  UploadedFile UploadedFile[]
}

model TestSubmission {
  id             String           @id @default(cuid())
  testId         String
  studentId      String
  startedAt      DateTime
  submittedAt    DateTime?
  answers        Json
  score          Float?
  feedback       String?
  status         SubmissionStatus
  grade          Grade?
  questionGrades QuestionGrade[]
  student        Student          @relation(fields: [studentId], references: [id])
  test           Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
  uploadedFiles  UploadedFile[]
}

model UploadedFile {
  id           String         @id @default(cuid())
  fileUrl      String
  fileType     FileType
  questionId   String
  submissionId String
  question     TestQuestion   @relation(fields: [questionId], references: [id])
  submission   TestSubmission @relation(fields: [submissionId], references: [id])
}

model AssessmentCompletion {
  id          String    @id @default(cuid())
  studentId   String
  quizId      String?
  testId      String?
  startedAt   DateTime
  completedAt DateTime?
  score       Float?
  quiz        Quiz?     @relation(fields: [quizId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  test        Test?     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Submission {
  id               String            @id @default(cuid())
  title            String
  courseId         String
  dueDate          DateTime
  createdAt        DateTime
  fileType         String
  maxAttempts      Int?
  lastDueDate      DateTime?
  description      String
  descriptionFiles String[]
  totalPoints      Int               @default(1)
  isActive         Boolean?          @default(true)
  course           Course            @relation(fields: [courseId], references: [id])
  entries          SubmissionEntry[]
}

model SubmissionEntry {
  id             String           @id @default(cuid())
  studentId      String
  submissionId   String
  submittedAt    DateTime
  attemptNumber  Int
  status         SubmissionStatus
  feedback       String
  fileUrl        String[]
  grade          Grade?
  questionGrades QuestionGrade[]
  student        Student          @relation(fields: [studentId], references: [id])
  submission     Submission       @relation(fields: [submissionId], references: [id])

  @@unique([submissionId, studentId])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  uploadedAt  DateTime @default(now())
  uploadedBy  String
}

model QuestionGrade {
  id                String           @id @default(cuid())
  questionId        String?
  score             Float
  outOf             Float
  feedback          String?
  testSubmissionId  String?
  submissionEntryId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  submissionEntry   SubmissionEntry? @relation(fields: [submissionEntryId], references: [id], onDelete: Cascade)
  testSubmission    TestSubmission?  @relation(fields: [testSubmissionId], references: [id], onDelete: Cascade)
}

model Grade {
  id                String           @id @default(cuid())
  studentId         String
  courseId          String
  type              String
  title             String
  outOf             Float
  createdAt         DateTime         @default(now())
  finalComments     String?
  submissionEntryId String?          @unique
  testSubmissionId  String?          @unique
  updatedAt         DateTime         @updatedAt
  score             Float
  course            Course           @relation(fields: [courseId], references: [id])
  student           Student          @relation(fields: [studentId], references: [id])
  submissionEntry   SubmissionEntry? @relation(fields: [submissionEntryId], references: [id], onDelete: Cascade)
  testSubmission    TestSubmission?  @relation(fields: [testSubmissionId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  link      String?
  studentId String?
  courseId  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  course    Course?  @relation(fields: [courseId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILE_UPLOAD
  MULTI_SELECT
  CODE
  MATCHING
  REORDER
  FILL_IN_THE_BLANK
  NUMERIC
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
  IN_PROGRESS
  NOT_SUBMITTED
  NOT_STARTED
}

enum FileType {
  PDF
  DOCX
  ZIP
  JPEG
  OTHER
}
