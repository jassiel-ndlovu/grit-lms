generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
}

model Tutor {
  id              String   @id @default(cuid())
  fullName        String
  email           String   @unique
  profileImageUrl String?
  bio             String?
  courses         Course[]
}

model Student {
  id                    String                 @id @default(cuid())
  fullName              String
  email                 String                 @unique
  imageUrl              String?
  courses               Course[]               @relation("CourseEnrollments")
  lessonCompletions     LessonCompletion[]
  assessmentCompletions AssessmentCompletion[]
  submissionEntries     SubmissionEntry[]
  Grade                 Grade[]
  Notification          Notification[]
  TestSubmission        TestSubmission[]
}

model Course {
  id           String         @id @default(cuid())
  name         String
  description  String?
  imageUrl     String
  tutorId      String
  tutor        Tutor          @relation(fields: [tutorId], references: [id])
  students     Student[]      @relation("CourseEnrollments")
  lessons      Lesson[]
  quizzes      Quiz[]
  tests        Test[]
  submissions  Submission[]
  courseEvents CourseEvent[]
  Grade        Grade[]
  Notification Notification[]
}

model Lesson {
  id             String             @id @default(cuid())
  title          String
  description    String?
  videoUrl       String[]           @default([])
  attachmentUrls Attachment[]
  order          Int
  courseId       String
  course         Course             @relation(fields: [courseId], references: [id])
  completions    LessonCompletion[]
}

model Attachment {
  id       String @id @default(cuid())
  title    String
  url      String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
}

model LessonCompletion {
  id          String   @id @default(cuid())
  studentId   String
  lessonId    String
  completedAt DateTime

  student Student @relation(fields: [studentId], references: [id])
  lesson  Lesson  @relation(fields: [lessonId], references: [id])
}

model CourseEvent {
  id       String   @id @default(cuid())
  title    String
  date     DateTime
  link     String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
}

model Quiz {
  id          String                 @id @default(cuid())
  title       String
  courseId    String
  course      Course                 @relation(fields: [courseId], references: [id])
  dueDate     DateTime
  createdAt   DateTime               @default(now())
  completions AssessmentCompletion[]
}

model Test {
  id                  String   @id @default(cuid())
  title               String
  description         String
  preTestInstructions String?
  dueDate             DateTime
  timeLimit           Int?
  totalPoints         Int
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  questions            TestQuestion[]
  submissions          TestSubmission[]
  AssessmentCompletion AssessmentCompletion[]
}

model TestQuestion {
  id           String         @id @default(uuid())
  testId       String
  test         Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  question     String
  type         QuestionType
  points       Int
  options      String[] // For MULTIPLE_CHOICE or MULTI_SELECT
  answer       Json? // Flexible: string, array, number, depending on type
  language     String? // For CODE (e.g. "Java", "Python")
  matchPairs   Json? // For MATCHING: e.g. [{ left: "TCP", right: "Reliable" }]
  reorderItems String[] // For REORDER: e.g. ["Step A", "Step B", ...]
  blankCount   Int? // For FILL_IN_THE_BLANK (optional helper for front-end)
  createdAt    DateTime       @default(now())
  UploadedFile UploadedFile[]
}

model TestSubmission {
  id          String           @id @default(cuid())
  testId      String
  studentId   String
  startedAt   DateTime
  submittedAt DateTime?
  answers     Json
  score       Float?
  feedback    String?
  status      SubmissionStatus

  test          Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  student       Student        @relation(fields: [studentId], references: [id])
  uploadedFiles UploadedFile[]
}

model UploadedFile {
  id           String   @id @default(cuid())
  fileUrl      String
  fileType     FileType
  questionId   String
  submissionId String

  question   TestQuestion   @relation(fields: [questionId], references: [id])
  submission TestSubmission @relation(fields: [submissionId], references: [id])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILE_UPLOAD
  MULTI_SELECT
  CODE
  MATCHING
  REORDER
  FILL_IN_THE_BLANK
  NUMERIC
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
  IN_PROGRESS
  NOT_SUBMITTED
  NOT_STARTED
}

enum FileType {
  PDF
  DOCX
  ZIP
  JPEG
  OTHER
}

model AssessmentCompletion {
  id          String    @id @default(cuid())
  studentId   String
  quizId      String?
  testId      String?
  startedAt   DateTime
  completedAt DateTime?
  score       Float?

  student Student @relation(fields: [studentId], references: [id])
  quiz    Quiz?   @relation(fields: [quizId], references: [id])
  test    Test?   @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Submission {
  id               String            @id @default(cuid())
  title            String
  description      String
  descriptionFiles String[]
  fileType         String
  courseId         String
  maxAttempts      Int? // null = unlimited attempts, number = limited attempts
  course           Course            @relation(fields: [courseId], references: [id])
  dueDate          DateTime
  lastDueDate      DateTime?
  createdAt        DateTime
  entries          SubmissionEntry[]
}

model SubmissionEntry {
  id            String           @id @default(cuid())
  studentId     String
  submissionId  String
  submittedAt   DateTime
  status        SubmissionStatus
  attemptNumber Int
  fileUrl       String[]
  feedback      String
  grade         Float?

  student    Student    @relation(fields: [studentId], references: [id])
  submission Submission @relation(fields: [submissionId], references: [id])

  @@unique([submissionId, studentId])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  uploadedAt  DateTime @default(now())
  uploadedBy  String // could reference tutor or admin
}

model Grade {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  type      String // e.g. "Quiz", "Test", "Final Mark"
  title     String // e.g. "June Test"
  value     Float
  outOf     Float
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  link      String?
  studentId String? // null = global notification
  courseId  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  student Student? @relation(fields: [studentId], references: [id])
  course  Course?  @relation(fields: [courseId], references: [id])
}
